# Name of the service
service: sls-todo-api

# Plugins enhancing serverless framework
plugins:
  - serverless-webpack
  # Locally dynamodb for local invokation and testing
  - serverless-dynamodb-local
  # Offline plugin for local development and testing
  - serverless-offline

package:
  individually: true

custom:
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk

  # Offline plugin configuration
  serverless-offline:
    port: 4000

  # Local dynamodb configuration
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    # Seed data for local todo table
    seed:
      todo:
        sources:
          - table: ${self:service}-todo-store
            sources: [./offline/seeds/data.json]

# Configure AWS as provider
provider:
  name: aws
  runtime: nodejs12.x
  # Name of dynamo db table used to store ToDos
  environment:
    TODOS_TABLE: ${self:service}-todo-store
  # Roles required to operate on the dynamo db table
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}'
  # Configured as a dev stage
  stage: dev
  # Chosen AWS Region
  region: eu-west-1
  # Default memory size
  memorySize: 192
  endpointType: regional
  tracing:
    lambda: true
    apiGateway: true
  usagePlan:
    throttle:
      burstLimit: 10
      rateLimit: 20
  logs:
    restApi: true
# FaaS funtions
functions:
  create:
    handler: todos/create.handler
    # Configuring HTTP events to link API Gateway to Lambda
    events:
      - http:
          path: todos
          method: POST
          cors: true
          integration: lambda-proxy
          request:
            schema:
              application/json: ${file(todos/create-schema.json)}
  get:
    handler: todos/get.handler
    events:
      - http:
          path: todos/{id}
          method: GET
          cors: true
          integration: lambda-proxy
  update:
    handler: todos/update.handler
    events:
      - http:
          path: todos/{id}
          method: PUT
          cors: true
          integration: lambda-proxy
  delete:
    handler: todos/delete.handler
    events:
      - http:
          path: todos/{id}
          method: DELETE
          cors: true
          integration: lambda-proxy
  list:
    handler: todos/list.handler
    events:
      - http:
          path: todos
          method: GET
          cors: true
          integration: lambda-proxy

# Configure the resources required for this service: AWS Dynamo DB Table
resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.TODOS_TABLE}
